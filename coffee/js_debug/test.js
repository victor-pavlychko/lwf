// Copyright (c) 2012-2013 GREE, Inc - http://git.io/uvS3hQ
// Copyright (c) 2010-2012 Tween.js authors - http://git.io/tiDrNw
// Copyright (c) 2001 Robert Penner - http://goo.gl/Qjqc0
// Copyright (c) 2011 Gary Linscott
// Copyright (c) 2011-2012 Juan Mellado
// Copyright (c) 2013 C. Scott Ananian - http://git.io/vUHSG
// Copyright (c) 2012 imaya - http://git.io/cC8gDw
// Generated by CoffeeScript 1.8.0
(function() {
  var Game,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game = (function() {
    function Game(touchDelegate, stage, cache, textNode, graphNode) {
      this.touchDelegate = touchDelegate;
      this.stage = stage;
      this.cache = cache;
      this.textNode = textNode != null ? textNode : null;
      this.graphNode = graphNode != null ? graphNode : null;
      this.onrelease = __bind(this.onrelease, this);
      this.onpress = __bind(this.onpress, this);
      this.onmove = __bind(this.onmove, this);
      this.requests = [];
      if (this.graphNode != null) {
        this.ctx = this.graphNode.getContext("2d");
        this.graphIndex = 0;
        this.graphX = 0;
        this.graphY = 0;
        this.graphWidth = this.graphNode.width;
        this.graphHeight = this.graphNode.height;
      }
    }

    Game.prototype.requestLWF = function(lwfName, onload) {
      var prefix;
      if (lwfName.match(/(.*\/)([^\/]+)/)) {
        prefix = RegExp.$1;
        lwfName = RegExp.$2;
      } else {
        prefix = "";
      }
      return this.requests.push({
        lwf: lwfName,
        prefix: prefix,
        stage: this.stage,
        onload: onload,
        useBackgroundColor: true,
        worker: false
      });
    };

    Game.prototype.loadLWFs = function(onloadall) {
      this.cache.loadLWFs(this.requests, onloadall);
      return this.requests = [];
    };

    Game.prototype.load = function(lwfName) {
      this.requestLWF(lwfName, (function(_this) {
        return function(lwf) {
          return _this.lwf = lwf;
        };
      })(this));
      return this.loadLWFs((function(_this) {
        return function(errors) {
          if (errors == null) {
            return _this.init();
          }
        };
      })(this));
    };

    Game.prototype.getTime = function() {
      return Date.now() / 1000.0;
    };

    Game.prototype.inputPoint = function(e) {
      var x, y;
      x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft - this.stage.offsetLeft;
      y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop - this.stage.offsetTop;
      return this.lwf.inputPoint(x, y);
    };

    Game.prototype.inputPress = function(e) {
      this.inputPoint(e);
      return this.lwf.inputPress();
    };

    Game.prototype.inputRelease = function(e) {
      this.inputPoint(e);
      return this.lwf.inputRelease();
    };

    Game.prototype.onmove = function(e) {
      return (function(_this) {
        return function(e) {
          return _this.inputQueue.push(function() {
            return _this.inputPoint(e);
          });
        };
      })(this)(e);
    };

    Game.prototype.onpress = function(e) {
      return (function(_this) {
        return function(e) {
          return _this.inputQueue.push(function() {
            return _this.inputPress(e);
          });
        };
      })(this)(e);
    };

    Game.prototype.onrelease = function(e) {
      return (function(_this) {
        return function(e) {
          return _this.inputQueue.push(function() {
            return _this.inputRelease(e);
          });
        };
      })(this)(e);
    };

    Game.prototype.init = function() {
      this.inputQueue = [];
      this.lwf.rendererFactory.fitForHeight(this.lwf);
      this.from = this.getTime();
      this.exec();
      this.touchDelegate.addEventListener("mousedown", this.onpress, false);
      this.touchDelegate.addEventListener("mousemove", this.onmove, false);
      this.touchDelegate.addEventListener("mouseup", this.onrelease, false);
      this.touchDelegate.addEventListener("touchstart", this.onpress, false);
      this.touchDelegate.addEventListener("touchmove", this.onmove, false);
      return this.touchDelegate.addEventListener("touchend", this.onrelease, false);
    };

    Game.prototype.exec = function() {
      var fps, input, tick, time, x, y, _i, _len, _ref;
      if (this.destroyed != null) {
        if (this.lwf != null) {
          this.touchDelegate.removeEventListener("mousedown", this.onpress, false);
          this.touchDelegate.removeEventListener("mousemove", this.onmove, false);
          this.touchDelegate.removeEventListener("mouseup", this.onrelease, false);
          this.touchDelegate.removeEventListener("touchstart", this.onpress, false);
          this.touchDelegate.removeEventListener("touchmove", this.onmove, false);
          this.touchDelegate.removeEventListener("touchend", this.onrelease, false);
          this.cache = null;
          this.lwf.destroy();
          this.lwf = null;
        }
        requestAnimationFrame((function(_this) {
          return function() {
            return _this.exec();
          };
        })(this));
        return;
      }
      time = this.getTime();
      tick = time - this.from;
      this.from = time;
      _ref = this.inputQueue;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        input();
      }
      this.inputQueue = [];
      this.lwf.exec(tick);
      this.lwf.render();
      if (this.textNode != null) {
        fps = Math.round(1.0 / tick);
        if (fps > 99) {
          fps = 99;
        }
        this.textNode.textContent = "" + fps + "fps";
        if (this.ctx != null) {
          x = this.graphIndex;
          y = (1 - fps / 60) * this.graphHeight;
          if (y < 0) {
            y = 0;
          }
          if (y >= this.graphHeight) {
            y = this.graphHeight - 1;
          }
          this.ctx.fillStyle = "rgb(255,255,255)";
          this.ctx.fillRect(this.graphX, 0, 2, this.graphHeight);
          this.ctx.fillStyle = "rgb(0,0,0)";
          this.ctx.beginPath();
          this.ctx.moveTo(this.graphX, this.graphY);
          this.ctx.lineTo(x, y);
          this.ctx.stroke();
          this.graphX = x;
          this.graphY = y;
          this.graphIndex += 2;
          if (this.graphIndex > this.graphWidth) {
            this.graphIndex = 0;
            this.graphX = 0;
          }
        }
      }
      return requestAnimationFrame((function(_this) {
        return function() {
          return _this.exec();
        };
      })(this));
    };

    Game.prototype.destroy = function() {
      return this.destroyed = true;
    };

    return Game;

  })();

  window.onload = function() {
    var br, div, graphNode, lastTime, loadScript, lwfName, renderer, stage, startGame, textNode, vendor, _i, _len, _ref;
    loadScript = function(url, onload) {
      var head, script;
      script = document.createElement("script");
      script.type = "text/javascript";
      script.onload = function() {
        return onload();
      };
      script.src = url;
      head = document.getElementsByTagName('head')[0];
      return head.appendChild(script);
    };
    div = null;
    stage = null;
    startGame = function(renderer) {
      var cache, game;
      if (renderer === "webgl") {
        LWF.useWebGLRenderer();
      } else if (renderer === "canvas") {
        LWF.useCanvasRenderer();
      } else {
        LWF.useWebkitCSSRenderer();
      }
      cache = LWF.ResourceCache.get();
      game = new Game(div, stage, cache, textNode, graphNode);
      window.game = game;
      return game.load(lwfName);
    };
    if (window.requestAnimationFrame == null) {
      _ref = ['webkit', 'moz'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vendor = _ref[_i];
        window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame'];
        if (window.requestAnimationFrame != null) {
          break;
        }
      }
    }
    if (window.requestAnimationFrame == null) {
      lastTime = 0;
      window.requestAnimationFrame = function(callback, element) {
        var currTime, id, timeToCall, timeoutCallback;
        currTime = new Date().getTime();
        if (lastTime === 0) {
          lastTime = currTime;
        }
        timeToCall = Math.max(0, 16 - (currTime - lastTime));
        timeoutCallback = function() {
          return callback(currTime + timeToCall);
        };
        id = window.setTimeout(timeoutCallback, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };
    }
    if (window.location.search.match(/lwf=([^=&]+)/)) {
      lwfName = RegExp.$1;
    } else {
      lwfName = "testlwf.lwf";
    }
    if (window.location.search.match(/renderer=(canvas|webgl)/)) {
      renderer = RegExp.$1;
      loadScript("lwf.js", function() {
        return startGame(renderer);
      });
      stage = document.createElement("canvas");
      stage.style.position = "absolute";
      stage.width = 0;
      stage.height = 0;
      if (window.location.search.match(/size=(\d+)x(\d+)/)) {
        stage.width = parseInt(RegExp.$1, 10);
        stage.height = parseInt(RegExp.$2, 10);
      }
    } else {
      loadScript("lwf.js", function() {
        return startGame("css");
      });
      stage = document.createElement("div");
      if (window.location.search.match(/size=(\d+)x(\d+)/)) {
        stage.style.width = RegExp.$1 + "px";
        stage.style.height = RegExp.$2 + "px";
      }
    }
    graphNode = document.createElement("canvas");
    graphNode.width = 280;
    graphNode.height = 24;
    graphNode.style.float = "left";
    graphNode.style.paddingRight = "5px";
    document.body.appendChild(graphNode);
    textNode = document.createTextNode("0fps");
    document.body.appendChild(textNode);
    br = document.createElement("br");
    br.style.clear = "left";
    document.body.appendChild(br);
    div = document.createElement("div");
    document.body.appendChild(div);
    return div.appendChild(stage);
  };

}).call(this);
